{"version":3,"sources":["Components/NewTimerModal/NewTimerModal.js","Components/Timer/Timer.js","Components/TimerCard/TimerCard.js","App.js","reportWebVitals.js","index.js"],"names":["NewTimerModal","addNewTimer","useState","open","setOpen","newTitle","setNewTitle","hours","setHours","minutes","setMinutes","seconds","setSeconds","handleClose","handleNewTimerChange","e","target","value","length","substring","name","Button","fullWidth","variant","onClick","Modal","onClose","style","display","justifyContent","marginTop","className","onSubmit","preventDefault","alert","id","uuid","title","timer","parseInt","flexDirection","TextField","label","onChange","toString","type","color","Timer","hoursMinSecs","removeTimerWhenFinished","resetTimer","handleResetTimer","isPaused","hrs","mins","secs","setTime","tick","useEffect","timerId","setInterval","clearInterval","padStart","TimerCard","setResetTimer","setIsPaused","Fab","aria-label","App","timers","setTimers","filter","obj","prev","map","time","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90b0e689.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport \"./styles.css\";\n\nimport uuid from \"uuid\";\n\n// MUI COMPONENTS\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport TextField from '@material-ui/core/TextField'\n\nconst NewTimerModal = ({ addNewTimer }) => {\n  const [open, setOpen] = useState(false);\n  const [newTitle, setNewTitle] = useState('')\n  const [hours, setHours] = useState(\"00\")\n  const [minutes, setMinutes] = useState(\"00\")\n  const [seconds, setSeconds] = useState(\"00\")\n  \n  // OPENS & CLOSES MODAL\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  // REINITIALIZE ALL VALUES TO 0\n  const resetAllValues = () =>{\n    setNewTitle('')\n    setHours('00')\n    setMinutes('00')\n    setSeconds('00')\n  }\n\n  // UPDATES WITH USER TITLE PARAM\n  const handleNewTitleChange = (e) =>{\n    setNewTitle(e.target.value)\n  }\n\n  // UPDATES WITH USER TIMER PARAMS\n  const handleNewTimerChange = (e) => {\n    if(e.target.value.length > 2){\n      e.target.value = e.target.value.substring(1)\n    }\n    if(e.target.name === 'hours'){\n      setHours(e.target.value)\n    }else if (e.target.name === 'minutes' && e.target.value <= 60){\n      setMinutes(e.target.value)\n    }else if (e.target.name === 'seconds' && e.target.value <= 60){\n      setSeconds(e.target.value)\n    }\n  }\n\n  // PUSHES USER FORM DATA UP TO APP\n  const handleSubmit = (e) =>{\n    e.preventDefault()\n    if(newTitle.length === 0){\n      alert('Please enter a title')\n    }else if(hours === \"00\" && minutes === \"00\" && seconds === \"00\"){\n      alert('Please enter a valid time')\n    }else{\n      addNewTimer({id: uuid(), title: newTitle, timer:{hours:parseInt(hours), minutes:parseInt(minutes), seconds:parseInt(seconds)}})\n      handleClose()\n      resetAllValues()\n    }\n  }\n\n  return (\n    <div>\n      <Button fullWidth={true} variant='contained' onClick={handleOpen}>Create new timer</Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        style={{display:'flex', justifyContent:'center', marginTop:'8rem'}}\n      >\n        <div className='modalContainer'>\n          <form onSubmit={handleSubmit} style={{display:'flex', flexDirection:'column'}}>\n            <TextField variant=\"outlined\" label=\"New Title\" value={newTitle} onChange={handleNewTitleChange}/>\n            <div className='modalTimeFields'>\n              <TextField name=\"hours\" label=\"hours\" value={hours.toString()} onChange={handleNewTimerChange}/>:\n              <TextField name=\"minutes\" label=\"minutes\" value={minutes.toString()} onChange={handleNewTimerChange}/>:\n              <TextField name=\"seconds\" label=\"seconds\" value={seconds.toString()} onChange={handleNewTimerChange}/>\n            </div>\n            <Button type='submit' variant='contained' color='primary'>START</Button>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default NewTimerModal","import React, { useState, useEffect } from \"react\";\n\nimport \"./styles.css\";\n\nconst Timer = ({\n  hoursMinSecs,\n  title,\n  id,\n  removeTimerWhenFinished,\n  resetTimer,\n  handleResetTimer,\n  isPaused,\n}) => {\n  const { hours, minutes, seconds } = hoursMinSecs;\n  const [[hrs, mins, secs], setTime] = useState([hours, minutes, seconds]);\n\n  // CALLS FUNCTION TO REMOVE TIMER FROM ARR\n  const handleRemovingTimer = () => {\n    removeTimerWhenFinished(id);\n  };\n\n  // RESET FUNCTION\n  const reset = () => {\n    setTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\n  };\n\n  // TICKS by 1 second, every second\n  const tick = () => {\n    if (hrs === 0 && mins === 0 && secs === 0) {\n      handleRemovingTimer();\n    } else if (mins === 0 && secs === 0) {\n      setTime([hrs - 1, 59, 59]);\n    } else if (secs === 0) {\n      setTime([hrs, mins - 1, 59]);\n    } else {\n      setTime([hrs, mins, secs - 1]);\n    }\n  };\n\n  // CALLS FUNCTION TO RESET\n  useEffect(() => {\n    if (resetTimer) {\n      handleResetTimer();\n      reset();\n    }\n  });\n\n  // TICK ONLY WHEN isPaused IS FALSE\n  useEffect(() => {\n    if (!isPaused) {\n      const timerId = setInterval(() => tick(), 1000);\n      return () => clearInterval(timerId);\n    }\n  });\n\n  return (\n    <div>\n      <p className=\"timetext\">{`${hrs.toString().padStart(2, \"0\")}:${mins\n        .toString()\n        .padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`}</p>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\n\n// CUSTOM COMPONENTS\nimport Timer from \"../Timer/Timer\";\n\n// MUI COMPONENTS\nimport Fab from \"@material-ui/core/Fab\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\n\nconst TimerCard = ({ timer, title, id, removeTimerWhenFinished }) => {\n  const [resetTimer, setResetTimer] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n\n  // SHOULD RESTART/LOOPS returns BOOL\n  const handleResetTimer = () => {\n    setResetTimer(!resetTimer);\n  };\n\n  // SHOULD PAUSE/PLAYS returns BOOL\n  const pausePlay = () => {\n    setIsPaused(!isPaused);\n  };\n  \n  return (\n    <div className=\"cardContainer\" id={title}>\n      <Timer\n        hoursMinSecs={timer}\n        title={title}\n        id={id}\n        removeTimerWhenFinished={removeTimerWhenFinished}\n        resetTimer={resetTimer}\n        isPaused={isPaused}\n        handleResetTimer={handleResetTimer}\n      />\n      <hr className=\"cardDivider\" />\n      <h5 className=\"cardTitle\">{title}</h5>\n      <div className=\"cardBtns\">\n        <Fab color=\"primary\" aria-label=\"add\" onClick={handleResetTimer}>\n          <LoopIcon />\n        </Fab>\n        <Fab color=\"secondary\" aria-label=\"edit\" onClick={pausePlay}>\n          {isPaused ? <PlayArrowIcon /> : <PauseIcon />}\n        </Fab>\n      </div>\n    </div>\n  );\n};\n\nexport default TimerCard;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\n// CUSTOM COMPONENTS\nimport NewTimerModal from \"./Components/NewTimerModal/NewTimerModal\";\nimport TimerCard from \"./Components/TimerCard/TimerCard\";\n\nfunction App() {\n  const [timers, setTimers] = useState([]);\n\n  // ADDS NEW TIMER TO ARR\n  const addNewTimer = (obj) =>{\n    setTimers(prev =>{\n      return [obj, ...prev]\n    })\n  }\n\n  // REMOVES TIMER WHEN 00:00:00\n  const removeTimerWhenFinished = (id) => {\n    setTimers(timers.filter((timer) => timer.id !== id));\n  };\n\n  return (\n    <div className=\"app\">\n      <NewTimerModal addNewTimer={addNewTimer} />\n      <div className=\"container\">\n        <div className=\"timers\">\n          {timers.map((time) => (\n            <TimerCard\n              key={time.id}\n              id={time.id}\n              timer={time.timer}\n              title={time.title}\n              removeTimerWhenFinished={removeTimerWhenFinished}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}